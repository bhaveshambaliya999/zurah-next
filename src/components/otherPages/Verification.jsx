import commanService from "@/CommanService/commanService";
import { verificationStatusAction } from "@/Redux/action";
import React, { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { toast } from "react-toastify";
import VerifyCard from "./VerifyCard";
import { RandomId } from "@/CommanFunctions/commanFunctions";

const Verification = (props) => {
  const dispatch = useDispatch();
  const storeEntityIds = useSelector((state) => state.storeEntityId);
  const loginDatas = useSelector((state) => state.loginData);
  const isLogin = Object.keys(loginDatas).length > 0;

  const [code, setCode] = useState("");
  const [codeError, setCodeError] = useState("");
  const [authAppName, setAuthAppName] = useState("");
  const [authAppNameError, setAuthAppNameError] = useState("");
  const [isAuthenticate, setIsAuthenticate] = useState(false);

  const handleChange = (event) => {
    if (/^\d*$/.test(event.target.value) && event.target.value.length <= 6) {
      setCode(event.target.value);
      setCodeError("");
    }
  };

  const handleVerifyCode = () => {
    const codeVerification = {
      SITDeveloper: "1",
      a: "CodeVerification",
      entity_id: storeEntityIds.entity_id,
      store_id: storeEntityIds.mini_program_id,
      secret_key: storeEntityIds.secret_key,
      tenant_id: storeEntityIds.tenant_id,
      code: code,
      member_id: isLogin ? loginDatas.member_id : RandomId,
      create_by: isLogin ? loginDatas.member_id : RandomId,
      authnticator_name: authAppName,
    };
    if (authAppName.length > 0 && code.length === 6) {
      commanService
        .postApi("/TwoFactorAuthntication", codeVerification)
        .then((response) => {
          if (response.data.success === 1) {
            if (authAppName.length > 0) {
              setCodeError("");
              setIsAuthenticate(true);
              setAuthAppNameError("");
              dispatch(verificationStatusAction(response.data.success));
            } else {
              setAuthAppNameError("Authenticator App Name Require");
            }
            toast.success(response.data.message);
          } else {
            setCodeError(response.data.message);
            if (authAppName.length < 1) {
              setAuthAppNameError("Authenticator App Name Require");
            }
            toast.error(response.data.message);
          }
        });
    } else if (code.length < 6) {
      setCodeError("Please enter atleast 6 digit code");
    } else if (authAppName === "") {
      setAuthAppNameError("Authenticator App Name Require");
    }
  };

  const handlePrevious = () => {
    if (props.setVerificationStep) {
      props.setVerificationStep(1);
    }
  };

  return (
    <div>
      {isAuthenticate ? (
        <VerifyCard setIsAuthenticate={setIsAuthenticate} />
      ) : (
        <div className="bg-white p-20px">
          <label className="mb-2 fw-semi-bold fs-2">2-Step Verification</label>

          <main className="my-2">
            <p className="fw-400 fs-16 mb-2">
              Enter the code generated By Your device.
            </p>
            <div className="mb-3">
              <p className="mb-1">
                {" "}
                <label htmlFor="code" className="fs-4">
                  6-digit code *
                </label>
              </p>
              <input
                type="tel"
                name="code"
                className="form-control verify-input"
                value={code}
                onChange={handleChange}
              />
              {codeError && (
                <p className="text-red my-0">
                  <small>{codeError}</small>
                </p>
              )}
            </div>
            <p className="fw-400 fs-16">
              Enter a Name for your Authenticator App.
            </p>
            <div className="mb-3">
              <p className="mb-1">
                {" "}
                <label htmlFor="authenticator-name" className="fs-4">
                  Authenticator Name *
                </label>{" "}
              </p>
              <input
                type="text"
                className="form-control verify-input"
                value={authAppName}
                onChange={(event) => {
                  setAuthAppName(event.target.value);
                  setAuthAppNameError("");
                }}
              />
              {authAppNameError && (
                <p className="text-red my-0">
                  <small>{authAppNameError}</small>
                </p>
              )}
            </div>
          </main>

          <footer className="btn-margin">
            <button
              type="button"
              className="btn btn-primary"
              onClick={handlePrevious}
            >
              PREVIOUS
            </button>

            <button
              type="button"
              className="btn btn-primary"
              onClick={handleVerifyCode}
            >
              NEXT
            </button>
          </footer>
        </div>
      )}
    </div>
  );
};

export default Verification;
